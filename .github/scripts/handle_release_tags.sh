#!/bin/bash
# Release tag handling script with version bumping
set -e

RUFF_SUCCESS="$1"
BUILD_SUCCESS="$2"
BRANCH_NAME="$3"

echo "üè∑Ô∏è Handling release tags with version bumping..."

# Configure git
git config --local user.email "action@github.com"
git config --local user.name "GitHub Action"

# Function to bump version
bump_version() {
    local version="$1"
    local bump_type="$2"
    
    # Parse version into major, minor, patch
    local major
    local minor
    local patch
    major=$(echo "$version" | cut -d. -f1)
    minor=$(echo "$version" | cut -d. -f2)
    patch=$(echo "$version" | cut -d. -f3)
    
    case "$bump_type" in
        "major")
            major=$((major + 1))
            minor=0
            patch=0
            ;;
        "minor")
            minor=$((minor + 1))
            patch=0
            ;;
        "patch")
            patch=$((patch + 1))
            ;;
    esac
    
    echo "${major}.${minor}.${patch}"
}

# Always clean up rel-* tags first
REL_TAGS=$(git tag -l | grep -E '^rel-(patch|minor|major)$' || true)
if [ -n "$REL_TAGS" ]; then
    echo "üßπ Found release candidate tags: $REL_TAGS"
    for tag in $REL_TAGS; do
        echo "Deleting tag: $tag"
        git push --delete origin "$tag" 2>/dev/null || true
    done
else
    echo "‚ÑπÔ∏è No release candidate tags found"
    exit 0
fi

# Check if all previous jobs succeeded
echo "üìä Job results:"
echo "  - Ruff: $RUFF_SUCCESS"  
echo "  - Build: $BUILD_SUCCESS"

if [ "$RUFF_SUCCESS" = "success" ] && [ "$BUILD_SUCCESS" = "success" ]; then
    # Check if current commit is on main branch (handles both branch pushes and tag pushes)
    CURRENT_COMMIT=$(git rev-parse HEAD)
    MAIN_COMMIT=$(git rev-parse origin/main 2>/dev/null || git rev-parse main 2>/dev/null || echo "")
    
    if [ "$CURRENT_COMMIT" = "$MAIN_COMMIT" ] || [ "$BRANCH_NAME" = "main" ]; then
        # Extract the release type from the rel-* tag
        RELEASE_TYPE=$(echo "$REL_TAGS" | head -1 | sed 's/^rel-//')
        echo "‚úÖ All tests passed on main branch! Processing $RELEASE_TYPE release..."
        
        # Get current version from pyproject.toml
        CURRENT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
        echo "üì¶ Current version: $CURRENT_VERSION"
        
        # Bump version
        NEW_VERSION=$(bump_version "$CURRENT_VERSION" "$RELEASE_TYPE")
        echo "üì¶ New version: $NEW_VERSION"
        
        # Update pyproject.toml
        sed -i.bak "s/^version = \".*\"/version = \"$NEW_VERSION\"/" pyproject.toml
        rm -f pyproject.toml.bak
        echo "üìù Updated pyproject.toml with version $NEW_VERSION"
        
        # Commit version change
        git add pyproject.toml
        git commit -m "Bump version to $NEW_VERSION

ü§ñ Automated version bump from $CURRENT_VERSION to $NEW_VERSION

Release type: $RELEASE_TYPE
Generated by GitHub Actions"
        
        # Create and push version tag
        VERSION_TAG="v$NEW_VERSION"
        git tag "$VERSION_TAG"
        
        echo "üöÄ Pushing version commit and tag..."
        git push origin HEAD:main
        git push origin "$VERSION_TAG"
        
        echo "‚úÖ Successfully created release $VERSION_TAG"
        echo "   - Updated pyproject.toml: $CURRENT_VERSION ‚Üí $NEW_VERSION"
        echo "   - Created commit with version bump"
        echo "   - Created and pushed tag: $VERSION_TAG"
    else
        echo "‚úÖ All tests passed on branch/ref '$BRANCH_NAME', but releases are only created on main branch"
        echo "   Current commit: $CURRENT_COMMIT"
        echo "   Main commit: $MAIN_COMMIT"
    fi
else
    echo "‚ùå Tests failed, no release created"
    echo "   Ruff result: $RUFF_SUCCESS"
    echo "   Build result: $BUILD_SUCCESS"
    echo "   Branch: $BRANCH_NAME"
fi